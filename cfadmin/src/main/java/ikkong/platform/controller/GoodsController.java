package ikkong.platform.controller;

import ikkong.common.config.Handler_Time;
import ikkong.core.jfinal.ext.kit.JsonKit;
import ikkong.core.toolbox.Record;
import ikkong.platform.meta.intercept.GoodsIntercept;
import ikkong.platform.model.Demandtype;
import ikkong.platform.model.Goods;
import ikkong.platform.service.DemandtypeService;
import ikkong.platform.service.GoodsService;
import ikkong.platform.service.impl.DemandTypeServiceImpl;
import ikkong.platform.service.impl.GoodsServiceImpl;
import ikkong.system.controller.base.UrlPermissController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Generated by Blade.
 * 2017-12-05 00:31:02
 */
public class GoodsController extends UrlPermissController {
	private static String CODE = "goods";
	private static String PERFIX = "goods";
	private static String LIST_SOURCE = "Goods.list";
	private static String BASE_PATH = "/platform/goods/";

	DemandtypeService demandTypeService = new DemandTypeServiceImpl();
	
	GoodsService service = new GoodsServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "goods.html");
	}

	public void add() {

		List<Demandtype> demandTypeList = demandTypeService.findAll();
		HashMap<String,ArrayList<String>> datas = new HashMap<>();
		HashMap<Integer,String> demandtype1 = new HashMap<Integer,String>();
		for (Demandtype demandtype:
				demandTypeList) {
			if(demandtype.getParaent() == 0){
				demandtype1.put(demandtype.getId(),demandtype.getName());
				datas.put(demandtype.getName(),new ArrayList<String>());
			}else{
				String key = demandtype1.get(demandtype.getParaent());
				if (!datas.containsKey(key)){
					datas.put(key,new ArrayList<String>());
				}
				ArrayList<String> demands = datas.get(key);
				demands.add(demandtype.getName());
			}
		}

		setAttr("types", JsonKit.toJson(datas));

		setAttr("code", CODE);
		render(BASE_PATH + "goods_add.html");
	}

	public void edit() {
		String id = getPara(0);
		Goods goods = service.findById(id);
		Demandtype demandType = demandTypeService.findById(goods.getType1());
		setAttr("TYP1",demandType.getName());
		demandType = demandTypeService.findById(goods.getType2());
		setAttr("TYP2",demandType.getName());
		setAttr("model", JsonKit.toJson(goods));

		List<Demandtype> demandTypeList = demandTypeService.findAll();
		HashMap<String,ArrayList<String>> datas = new HashMap<>();
		HashMap<Integer,String> demandtype1 = new HashMap<Integer,String>();
		for (Demandtype demandtype:
				demandTypeList) {
			if(demandtype.getParaent() == 0){
				demandtype1.put(demandtype.getId(),demandtype.getName());
				datas.put(demandtype.getName(),new ArrayList<String>());
			}else{
				String key = demandtype1.get(demandtype.getParaent());
				if (!datas.containsKey(key)){
					datas.put(key,new ArrayList<String>());
				}
				ArrayList<String> demands = datas.get(key);
				demands.add(demandtype.getName());
			}
		}

		setAttr("types", JsonKit.toJson(datas));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "goods_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Goods goods = service.findById(id);
		Demandtype demandType = demandTypeService.findById(goods.getType1());
		Record maps = Record.parse(goods);
		maps.put("TYP1",demandType.getName());
		demandType = demandTypeService.findById(goods.getType2());
		maps.put("TYP2",demandType.getName());

		setAttr("model", JsonKit.toJson(maps));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "goods_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE,new GoodsIntercept());
		renderJson(grid);
	}

	public void save() {
		Goods goods = mapping(PERFIX, Goods.class);

		String type1 = getPara("type1");
		String type2 = getPara("type2");
		String effective = getPara("effective");

		Record updateMap = Record.create().set("name", type1);
		Demandtype demandType = demandTypeService.findFirst(" select * from demandtype where name  = #{name}",updateMap);
		goods.setType1(demandType.getId());
		updateMap = Record.create().set("name", type2);
		demandType = demandTypeService.findFirst(" select * from demandtype where name  = #{name}",updateMap);
		goods.setType2(demandType==null?0:demandType.getId());
		goods.setEffective(Handler_Time.getInstance(effective).getTimeInSeconds());
		goods.setCreatTime(Handler_Time.getInstance().getTimeInSeconds());

		boolean temp = service.save(goods);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Goods goods = mapping(PERFIX, Goods.class);
		String type1 = getPara("type1");
		String type2 = getPara("type2");
		Record updateMap = Record.create().set("name", type1);
		System.out.println(type1+"|"+type2);
		Demandtype demandType = demandTypeService.findFirst(" select * from demandtype where name  = #{name}",updateMap);
		goods.setType1(demandType.getId());
		updateMap = Record.create().set("name", type2);
		demandType = demandTypeService.findFirst(" select * from demandtype where name  = #{name}",updateMap);
		goods.setType2(demandType==null?0:demandType.getId());
		System.out.println(goods);
		boolean temp = service.update(goods);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
