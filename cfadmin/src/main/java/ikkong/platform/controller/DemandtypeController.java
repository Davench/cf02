package ikkong.platform.controller;

import ikkong.core.jfinal.ext.kit.JsonKit;
import ikkong.core.toolbox.Record;
import ikkong.platform.meta.intercept.DemandtypeIntercept;
import ikkong.platform.model.Demandtype;
import ikkong.platform.service.DemandtypeService;
import ikkong.platform.service.impl.DemandTypeServiceImpl;
import ikkong.system.controller.base.UrlPermissController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Generated by Blade.
 * 2017-12-05 01:01:32
 */
public class DemandtypeController extends UrlPermissController {
    private static String CODE = "demandtype";
    private static String PERFIX = "demandtype";
    private static String LIST_SOURCE = "Demandtype.list";
    private static String BASE_PATH = "/platform/demandtype/";

    DemandtypeService service = new DemandTypeServiceImpl();

    public void index() {
        setAttr("code", CODE);
        render(BASE_PATH + "demandtype.html");
    }

    public void add() {
        List<Demandtype> demandTypeList = service.findAll();
        HashMap<String, ArrayList<String>> datas = new HashMap<>();
        HashMap<Integer, String> demandtype1 = new HashMap<Integer, String>();
        for (Demandtype demandtype : demandTypeList) {
            if (demandtype.getParaent() == 0) {
                demandtype1.put(demandtype.getId(), demandtype.getName());
                datas.put(demandtype.getName(), new ArrayList<String>());
            } else {
                String key = demandtype1.get(demandtype.getParaent());
                if (!datas.containsKey(key)) {
                    datas.put(key, new ArrayList<String>());
                }
                ArrayList<String> demands = datas.get(key);
                demands.add(demandtype.getName());
            }
        }
        setAttr("types", JsonKit.toJson(datas));

        setAttr("code", CODE);
        render(BASE_PATH + "demandtype_add.html");
    }

    public void edit() {
        String id = getPara(0);
        Demandtype demandtype = service.findById(id);
        setAttr("model", JsonKit.toJson(demandtype));
        setAttr("id", id);
        setAttr("code", CODE);
        render(BASE_PATH + "demandtype_edit.html");
    }

    public void view() {
        String id = getPara(0);

        Demandtype demandtype = service.findById(id);

        Record maps = Record.parse(demandtype);
        if (demandtype.getParaent() != 0) {
            Demandtype demandType1 = service.findById(demandtype.getParaent());
            maps.put("TYP1", demandType1.getName());
        } else {
            maps.put("TYP1", "æ— ");
        }

        setAttr("model", JsonKit.toJson(maps));
        setAttr("id", id);
        setAttr("code", CODE);
        render(BASE_PATH + "demandtype_view.html");
    }

    public void list() {
        Object grid = paginate(LIST_SOURCE, new DemandtypeIntercept());
        renderJson(grid);
    }

    public void save() {
        Demandtype demandtype = mapping(PERFIX, Demandtype.class);
        String type1 = getPara("type1");
        if (type1 != null) {
            Record updateMap = Record.create().set("name", type1);
            Demandtype demandType1 = service.findFirst(" select * from demandtype where name  = #{name}", updateMap);
            if (demandType1 != null) {
                demandtype.setParaent(demandType1.getId());
            } else {
                demandtype.setParaent(0);
            }
        } else {
            demandtype.setParaent(0);
        }
        boolean temp = service.save(demandtype);
        if (temp) {
            renderJson(success(SAVE_SUCCESS_MSG));
        } else {
            renderJson(error(SAVE_FAIL_MSG));
        }
    }

    public void update() {
        Demandtype demandtype = mapping(PERFIX, Demandtype.class);
        String type1 = getPara("type1");
        if (type1 != null) {
            Record updateMap = Record.create().set("name", type1);
            Demandtype demandType1 = service.findFirst(" select * from demandtype where name  = #{name}", updateMap);
            if (demandType1 != null) {
                demandtype.setParaent(demandType1.getId());
            } else {
                demandtype.setParaent(0);
            }
        } else {
            demandtype.setParaent(0);
        }
        boolean temp = service.update(demandtype);
        if (temp) {
            renderJson(success(UPDATE_SUCCESS_MSG));
        } else {
            renderJson(error(UPDATE_FAIL_MSG));
        }
    }

    public void remove() {
        String ids = getPara("ids");
        Record updateMap = Record.create().set("ids", ids);
        List<Demandtype> demandtypeList = service.findBy(" select * from demandtype where id in (#{ids}) OR 'paraent' in  (#{ids})",updateMap);
        StringBuffer str = new StringBuffer();
        for (Demandtype demandtype:demandtypeList) {
            if (str.length()!=0){
                str.append(",");
            }
            str.append(demandtype.getId());
        }
        int cnt = service.deleteByIds(str.toString());
        if (cnt > 0) {
            renderJson(success(DEL_SUCCESS_MSG));
        } else {
            renderJson(error(DEL_FAIL_MSG));
        }
    }
}
